import { inject, type Module } from 'langium';
import { createDefaultModule, createDefaultSharedModule, type DefaultSharedModuleContext, type LangiumServices, type LangiumSharedServices, type PartialLangiumServices } from 'langium/lsp';
import { TypeCGeneratedModule, TypeCGeneratedSharedModule } from './generated/module.js';
import { TypeCScopeComputation } from './scope-system/tc-scope-computation.js';
import { registerValidationChecks, TypeCValidator } from './type-c-validator.js';
import { TypeCScopeProvider } from './scope-system/tc-scope-provider.js';
import { TCWorkspaceManager } from './workspace/tc-workspace-manager.js';
import { TypeCTypeProvider } from './typing/type-c-type-provider.js';
import { TypeCDocumentationProvider } from './documentation/tc-documentation-provider.js';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type TypeCAddedServices = {
    validation: {
        TypeCValidator: TypeCValidator
    },
    references: {
        ScopeComputation: TypeCScopeComputation,
        ScopeProvider: TypeCScopeProvider
    },
    typing: {
        TypeProvider: TypeCTypeProvider
    },
    documentation: {
        DocumentationProvider: TypeCDocumentationProvider
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type TypeCServices = LangiumServices & TypeCAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const TypeCModule: Module<TypeCServices, PartialLangiumServices & TypeCAddedServices> = {
    validation: {
        TypeCValidator: () => new TypeCValidator()
    },
    references: {
        ScopeComputation: (services: LangiumServices) => new TypeCScopeComputation(services),
        ScopeProvider: (services: TypeCServices) => new TypeCScopeProvider(services),
    },
    typing: {
        TypeProvider: (services: TypeCServices) => new TypeCTypeProvider(services)
    },
    documentation: {
        DocumentationProvider: (services: TypeCServices) => new TypeCDocumentationProvider(services)
    }
};

/**
 * Question: Where do these come from?
 */
export const TypeCSharedModule = {
    workspace: {
        WorkspaceManager: (services: LangiumSharedServices) => new TCWorkspaceManager(services)
    }
};

/**
 * Create the full set of services required by Langium.
 *
 * First inject the shared services by merging two modules:
 *  - Langium default shared services
 *  - Services generated by langium-cli
 *
 * Then inject the language-specific services by merging three modules:
 *  - Langium default language-specific services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 *
 * @param context Optional module context with the LSP connection
 * @returns An object wrapping the shared services and the language-specific services
 */
export function createTypeCServices(context: DefaultSharedModuleContext): {
    shared: LangiumSharedServices,
    TypeC: TypeCServices
} {
    const shared = inject(
        createDefaultSharedModule(context),
        TypeCGeneratedSharedModule,
        TypeCSharedModule
    );
    const TypeC = inject(
        createDefaultModule({ shared }),
        TypeCGeneratedModule,
        TypeCModule
    );
    shared.ServiceRegistry.register(TypeC);
    registerValidationChecks(TypeC);
    if (!context.connection) {
        // We don't run inside a language server
        // Therefore, initialize the configuration provider instantly
        shared.workspace.ConfigurationProvider.initialized({});
    }
    return { shared, TypeC };
}
